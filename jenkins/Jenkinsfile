// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

def repoName = 'origin'

node {
    stage 'Checkout'
    checkout(
        changelog: true,
        poll: true,
        scm: [
            $class: 'GitSCM',
            branches: [[name: "${repoName}/${SOURCE_BRANCH}"]],
            doGenerateSubmoduleConfigurations: false,
            extensions: [
                [$class: 'WipeWorkspace'],
                [$class: 'PruneStaleBranch'],
                [$class: 'SubmoduleOption', disableSubmodules: false, recursiveSubmodules: true, reference: '', trackingSubmodules: false],
                [$class: 'PreBuildMerge', options: [
                    fastForwardMode: 'FF',
                    mergeRemote: 'origin',
                    mergeStrategy: 'default',
                    mergeTarget: DESTINATION_BRANCH
                ]], 
                [$class: 'AuthorInChangelog']
            ],
            submoduleCfg: [],
            userRemoteConfigs: [[name: repoName, url: REPO_URI]]
        ]
    )

    stash name: 'merged-source', useDefaultExcludes: true

    def builds = [:]
    builds['C'] = {
        node('linux') {
            withCredentials([
                [$class: 'StringBinding', credentialsId: '05294bb0-93c3-4f01-a258-666586a3917c', variable: 'IOTHUB_CONNECTION_STRING'],
                [$class: 'StringBinding', credentialsId: '4a97c867-c403-4c77-839b-5eabf39feafe', variable: 'STORAGE_ACCOUNT_CONNECTION_STRING'],
                [$class: 'StringBinding', credentialsId: '479fc6e5-1fda-4c7b-977b-8cf5d4675fa7', variable: 'IOTHUB_EVENTHUB_CONNECTION_STRING']])
            {
                unstash 'merged-source'
                sh 'jenkins/linux_c.sh --run-e2e-tests'
            }
        }
    }
    builds['Java'] = {
        node('linux') {
            withCredentials([
                [$class: 'StringBinding', credentialsId: '05294bb0-93c3-4f01-a258-666586a3917c', variable: 'IOTHUB_CONNECTION_STRING'],
                [$class: 'StringBinding', credentialsId: '4a97c867-c403-4c77-839b-5eabf39feafe', variable: 'STORAGE_ACCOUNT_CONNECTION_STRING']])
            {
                unstash 'merged-source'
                sh 'jenkins/linux_java.sh'
            }
        }
    }
    builds['Node.js'] = {
        node('linux') {
            withCredentials ([
                [$class: 'StringBinding', credentialsId: '05294bb0-93c3-4f01-a258-666586a3917c', variable: 'IOTHUB_CONNECTION_STRING'],
                [$class: 'StringBinding', credentialsId: '04b5e12d-fa48-42a4-b9e3-58d4255669f6', variable: 'STORAGE_CONNECTION_STRING'],
                [$class: 'StringBinding', credentialsId: '954cb13d-66df-4c8e-9dca-1ae25b9a4db8', variable: 'IOTHUB_DEVICE_KEY']])
            {
                withEnv(['IOTHUB_DEVICE_ID=dlbtest01']) {
                    unstash 'merged-source'
                    sh 'jenkins/linux_node.sh'
                }
            }
        }
    }
    
    stage 'Build + test language SDKs'
    // builds.failFast = true // looks like failFast doesn't work right now (https://issues.jenkins-ci.org/browse/JENKINS-35647)
    parallel builds

    stage 'Publish to repository'
    // This is currently the best way to push a branch from a Pipeline job. It's
    // not ideal - https://issues.jenkins-ci.org/browse/JENKINS-28335 is an open
    // JIRA for getting the GitPublisher Jenkins functionality working with
    // Pipeline.
    // see https://github.com/jenkinsci/pipeline-examples/blob/master/pipeline-examples/push-git-repo/pushGitRepo.Groovy
    withCredentials([[
        $class: 'UsernamePasswordMultiBinding',
        credentialsId: 'cf1ac13d-fc43-450b-9d4d-8352086aa522',
        usernameVariable: 'GIT_USERNAME',
        passwordVariable: 'GIT_PASSWORD']])
    {
        def repoAddr = REPO_URI.substring('https://'.length())
        withEnv([
            "REPO_ADDRESS=${repoAddr}",
            "DESTINATION_BRANCH=${DESTINATION_BRANCH}"])
        {
            sh 'git push https://$GIT_USERNAME:$GIT_PASSWORD@$REPO_ADDRESS HEAD:$DESTINATION_BRANCH'
        }
    }
}
